## Creates a list version of a matrix that will
## allow the caching of the inverse to avoid
## repetitive computatoin

## Create a list to hold a matrix and its inverse

makeCacheMatrix <- function(x = matrix()) {
   invm <- NULL
   # to add the matrix
   set <- function(y) {
      x <<- y
      invm <<- NULL
   }
   # to extract the matrix
   get <- function() x
   # to calculate the inverse if needed
   setinv <- function(solve) invm <<- solve
   # to extract the inverse if its there
   getinv <- function() invm
      # the final list representing the matrix
      # and its inverse
      list(set = set, get = get,
         setinv = setinv,getinv = getinv)

}


## This function will return the cached inverse
## if it exists, and add it to the list version
## of the matrix if it doesn't exist

cacheSolve <- function(x, ...) {
   ## Return a matrix that is the inverse of 'x'
   invm <- x$getinv()
   if (!is.null(invm)) {
      # inverse is pre-computed so return it
      message("Getting cached inverse")
      return(invm)
   }
   # inverse isn't precomputed so get the data
   # get the inverse, cache it and return inverse
   data <- x$get()
   invm <- solve(data,...)
   x$setinv(invm)
   invm
}
